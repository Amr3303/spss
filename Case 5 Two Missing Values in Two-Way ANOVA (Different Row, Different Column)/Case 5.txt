* Encoding: UTF-8.
BEGIN PROGRAM.
import spss
import spssdata

def load_data():
    """
    Loads the data set from SPSS, store it in a list of lists
    """
    dataset = spssdata.Spssdata()
    data = []
    for row in dataset:
        data.append([row[0], row[1], row[2]])  # Row, Column, Value
    dataset.close()
    return data

def estimate_two_missing_values_diff_rows_diff_cols(data):
    """
    Estimate two missing values in different rows and different columns in a two-way ANOVA.
    
    Parameters:
    data -- list of lists where each inner list is [row, column, value]
    
    Returns:
    x1, x2 -- the estimated missing values
    """
    # Find the rows and columns with missing values
    missing_data = []
    for i, item in enumerate(data):
        if item[2] is None:
            missing_data.append((i, item[0], item[1]))
    
    if len(missing_data) != 2:
        return "Error: Expected exactly two missing values"
    
    # Check if missing values are in different rows and columns
    if missing_data[0][1] == missing_data[1][1]:
        return "Error: Missing values must be in different rows"
    if missing_data[0][2] == missing_data[1][2]:
        return "Error: Missing values must be in different columns"
    
    # Get missing positions
    missing_rows = [item[1] for item in missing_data]
    missing_cols = [item[2] for item in missing_data]
    
    # Get the number of rows and columns
    rows = set(item[0] for item in data)
    columns = set(item[1] for item in data)
    r = len(rows)
    c = len(columns)
    
    # Calculate F
    F = (r - 1) * (c - 1)
    
    # Calculate R1, R2 (sums of values in the rows with missing values)
    R1 = sum(item[2] for item in data if item[0] == missing_rows[0] and item[2] is not None)
    R2 = sum(item[2] for item in data if item[0] == missing_rows[1] and item[2] is not None)
    
    # Calculate C1, C2 (sums of values in the columns with missing values)
    C1 = sum(item[2] for item in data if item[1] == missing_cols[0] and item[2] is not None)
    C2 = sum(item[2] for item in data if item[1] == missing_cols[1] and item[2] is not None)
    
    # Calculate G (total sum of all values)
    G = sum(item[2] for item in data if item[2] is not None)
    
    # Calculate W1, W2
    W1 = r * R1 + c * C1 - G
    W2 = r * R2 + c * C2 - G
    
    # Print intermediate values for verification
    print("r (number of rows):", r)
    print("c (number of columns):", c)
    print("F:", F)
    print("R1 (sum of row " + str(missing_rows[0]) + "):", R1)
    print("R2 (sum of row " + str(missing_rows[1]) + "):", R2)
    print("C1 (sum of column " + str(missing_cols[0]) + "):", C1)
    print("C2 (sum of column " + str(missing_cols[1]) + "):", C2)
    print("G (total sum):", G)
    print("W1:", W1)
    print("W2:", W2)
    
    # Apply the formulas
    x1 = (F * W1 - W2) / (F * F - 1)
    x2 = (F * W2 - W1) / (F * F - 1)
    
    return x1, x2, missing_data

def main():
    data = load_data()
    print(data)
    print("\n\n\n")  # Fix the newline syntax

    x_hat1, x_hat2, missing_data = estimate_two_missing_values_diff_rows_diff_cols(data)

    if x_hat1 is not None or x_hat2 is not None:
        print("\nEstimated value for the row: {} and column: {} = {:.2f}".format(
            int(missing_data[0][1]), int(missing_data[0][2]), x_hat1))
        print("Estimated value for the row: {} and column: {} = {:.2f}".format(
            int(missing_data[1][1]), int(missing_data[1][2]), x_hat2))
    else:
        print("Unable to compute the missing value, boo hoo")

main()

END PROGRAM.
